"""
M√≥dulo game_logic.py - L√≥gica principal do jogo de adivinha√ß√£o.

Este m√≥dulo cont√©m a classe JogoAdivinhacao que implementa toda a l√≥gica do jogo,
incluindo sele√ß√£o de n√≠vel, gera√ß√£o do n√∫mero aleat√≥rio e verifica√ß√£o de palpites.
Foi projetado para ser usado em conjunto com a interface Flet no arquivo app.py.

Autor: [Bruno Novais Costa Sim√µes]
Data: [09/05/2025]
Vers√£o: 1.0
"""

import random

class JogoAdivinhacao:
    """
    Classe principal que gerencia l√≥gica do jogo de adivinha√ß√£o num√©rica.
    
    Atributos:
        numero_certo (int): N√∫mero aleat√≥rio a ser adivinhado
        tentativas_restantes (int): Tentativas restantes no jogo atual
        tentativas_totais (int): Total de tentativas para o jogo atual
        nivel (str): N√≠vel de dificuldade selecionado
        minimo (int): Valor m√≠nimo do intervalo para o n√≠vel atual
        maximo (int): Valor m√°ximo do intervalo para o n√≠vel atual
    """
    
    def __init__(self):
        """Inicializa o jogo com valores padr√£o"""
        self.numero_certo = None
        self.tentativas_restantes = 0
        self.tentativas_totais = 0
        self.nivel = None
        self.minimo = 1  # Valor m√≠nimo padr√£o
        self.maximo = 10  # Valor m√°ximo padr√£o

    def definir_nivel(self, nivel):
        """
        Configura o n√≠vel de dificuldade do jogo e retorna par√¢metros de tentativas
        
        Args:
            nivel (str): N√≠vel selecionado ('F√°cil (1-10)', 'M√©dio (1-30)', etc.)
            
        Returns:
            dict: Contendo configura√ß√µes de tentativas para o n√≠vel selecionado:
                - min_tentativas: M√≠nimo de tentativas permitidas
                - max_tentativas: M√°ximo de tentativas permitidas
                - divisions: Divis√µes para o controle deslizante
        """
        self.nivel = nivel
        
        # Configura intervalo e tentativas baseado no n√≠vel selecionado
        if nivel == "F√°cil (1-10)":
            self.minimo, self.maximo = 1, 10
            return {"min_tentativas": 1, "max_tentativas": 4, "divisions": 3}
        elif nivel == "M√©dio (1-30)":
            self.minimo, self.maximo = 1, 30
            return {"min_tentativas": 1, "max_tentativas": 6, "divisions": 5}
        elif nivel == "Dif√≠cil (1-50)":
            self.minimo, self.maximo = 1, 50
            return {"min_tentativas": 1, "max_tentativas": 8, "divisions": 7}
        else:  # Muito Dif√≠cil (1-100)
            self.minimo, self.maximo = 1, 100
            return {"min_tentativas": 1, "max_tentativas": 10, "divisions": 9}

    def iniciar_jogo(self, tentativas_selecionadas):
        """
        Inicia um novo jogo com as configura√ß√µes selecionadas
        
        Args:
            tentativas_selecionadas (int): N√∫mero de tentativas escolhido pelo jogador
            
        Returns:
            dict: Contendo informa√ß√µes do jogo iniciado:
                - numero_certo: N√∫mero aleat√≥rio gerado
                - tentativas: Total de tentativas
                - min: Valor m√≠nimo do intervalo
                - max: Valor m√°ximo do intervalo
        """
        self.numero_certo = random.randint(self.minimo, self.maximo)
        self.tentativas_totais = tentativas_selecionadas
        self.tentativas_restantes = self.tentativas_totais
        
        return {
            "numero_certo": self.numero_certo,
            "tentativas": self.tentativas_totais,
            "min": self.minimo,
            "max": self.maximo
        }

    def verificar_palpite(self, palpite):
        """
        Verifica se o palpite do jogador est√° correto e retorna feedback
        
        Args:
            palpite (int): N√∫mero digitado pelo jogador
            
        Returns:
            dict: Contendo informa√ß√µes sobre o resultado do palpite:
                - valido: Booleano indicando se o palpite est√° no intervalo v√°lido
                - acertou: Booleano indicando se o palpite estava correto
                - mensagem: Feedback para o jogador
                - cor: Cor para exibi√ß√£o do feedback
                - tentativas_restantes: Tentativas restantes ap√≥s este palpite
                - jogo_acabou: Booleano indicando se o jogo terminou
                - numero_certo: N√∫mero correto (apenas quando o jogo acaba)
        """
        # Verifica se o palpite est√° dentro do intervalo v√°lido
        if palpite < self.minimo or palpite > self.maximo:
            return {
                "valido": False,
                "mensagem": f"‚ö†Ô∏è Digite entre {self.minimo} e {self.maximo}! Essa tentativa n√£o foi contada.",
                "cor": "AMBER_400"
            }
            
        # Decrementa tentativas restantes
        self.tentativas_restantes -= 1
        
        # Verifica se o palpite est√° correto
        if palpite == self.numero_certo:
            return {
                "valido": True,
                "acertou": True,
                "mensagem": f"üéâ Acertou em {self.tentativas_totais - self.tentativas_restantes} tentativa(s)!",
                "cor": "GREEN_300",
                "tentativas_restantes": self.tentativas_restantes,
                "jogo_acabou": True
            }
        else:
            # Determina a dica (MAIOR ou MENOR)
            dica = "‚¨ÜÔ∏è MAIOR!" if palpite < self.numero_certo else "‚¨áÔ∏è MENOR!"
            mensagem = dica
            
            # Se acabaram as tentativas, revela o n√∫mero correto
            if self.tentativas_restantes == 0:
                mensagem = f"üíÄ Fim! O n√∫mero era {self.numero_certo}."
                
            return {
                "valido": True,
                "acertou": False,
                "mensagem": mensagem,
                "cor": "RED_300",
                "tentativas_restantes": self.tentativas_restantes,
                "jogo_acabou": self.tentativas_restantes == 0,
                "numero_certo": self.numero_certo if self.tentativas_restantes == 0 else None
            }